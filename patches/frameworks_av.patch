From 046128d48b1ed2c08d6f1098b57b174ebcfe5505 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Wed, 24 Apr 2013 11:37:19 +0700
Subject: [PATCH 1/7] OMXCodec: Re-implement requires-flush-before-shutdown
 quirk

Support is already there, but is not in the codec quirk reading list.
Re-implement it as required by Broadcom's OMX

Change-Id: I1beac06af8118dcf0c248b631bc8e6dbbab2c1d5
---
 media/libstagefright/OMXCodec.cpp | 3 +++
 1 file changed, 3 insertions(+)

diff --git a/media/libstagefright/OMXCodec.cpp b/media/libstagefright/OMXCodec.cpp
index b1dde80..8c1c962 100644
--- a/media/libstagefright/OMXCodec.cpp
+++ b/media/libstagefright/OMXCodec.cpp
@@ -264,6 +264,9 @@ uint32_t OMXCodec::getComponentQuirks(
     if (info->hasQuirk("output-buffers-are-unreadable")) {
         quirks |= kOutputBuffersAreUnreadable;
     }
+    if (info->hasQuirk("requires-flush-before-shutdown")) {
+        quirks |= kRequiresFlushBeforeShutdown;
+    }
 
     return quirks;
 }
-- 
2.6.3


From 7d31a6d74d54b39d63f9111f8b228883b004e6c6 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Tue, 17 Dec 2013 13:15:52 +0700
Subject: [PATCH 2/7] OMXCodec: set default input buffer size

Broadcom OMX only set the buffer size to 65536 by default which
is not enough for higher bitrate video

(This patch has been adapted for Lollipop)

Change-Id: I74372f3d821e41feb38b9bc0cca4ef56aa019493
---
 media/libstagefright/ACodec.cpp   | 12 ++++++++++++
 media/libstagefright/OMXCodec.cpp | 12 ++++++++++++
 2 files changed, 24 insertions(+)

diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index 8d9bd21..79dc0f2 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -2166,6 +2166,18 @@ status_t ACodec::configureCodec(
     if (rateFloat > 0) {
         err = setOperatingRate(rateFloat, video);
     }
+// Capri's OMX fail to set a reasonable default size from width and height
+#ifdef CAPRI_HWC
+    else if (!strncmp(mComponentName.c_str(), "OMX.BRCM.vc4.decoder.", 21)) {
+        int32_t width;
+        int32_t height;
+        if (msg->findInt32("width", &width) && msg->findInt32("height", &height)) {
+            setMinBufferSize(kPortIndexInput, (width * height * 3) / 2);
+        } else {
+            ALOGE("Failed to set min buffer size");
+        }
+    }
+#endif
 
     mBaseOutputFormat = outputFormat;
 
diff --git a/media/libstagefright/OMXCodec.cpp b/media/libstagefright/OMXCodec.cpp
index 8c1c962..fa2999a 100644
--- a/media/libstagefright/OMXCodec.cpp
+++ b/media/libstagefright/OMXCodec.cpp
@@ -672,6 +672,18 @@ status_t OMXCodec::configureCodec(const sp<MetaData> &meta) {
     if (meta->findInt32(kKeyMaxInputSize, &maxInputSize)) {
         setMinBufferSize(kPortIndexInput, (OMX_U32)maxInputSize);
     }
+// Capri's OMX fail to set a reasonable default size from width and height
+#ifdef CAPRI_HWC
+    else if (!strncmp(mComponentName, "OMX.BRCM.vc4.decoder.", 21)) {
+        int32_t width;
+        int32_t height;
+        if (meta->findInt32(kKeyWidth, &width) && meta->findInt32(kKeyHeight, &height)) {
+            setMinBufferSize(kPortIndexInput, (width * height * 3) / 2);
+        } else {
+            ALOGE("Failed to set min buffer size");
+        }
+    }
+#endif
 
     initOutputFormat(meta);
 
-- 
2.6.3


From bf77194473bfb37092542a0a67e7a28e2582263a Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Wed, 19 Nov 2014 20:33:58 +0700
Subject: [PATCH 3/7] ACodec: skip port index checking on vc4 encoder

Change-Id: I3fe742a8ec4b7f9bc0c4e5f0825fd3b88965a95e
---
 media/libstagefright/ACodec.cpp | 5 +++++
 1 file changed, 5 insertions(+)

diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index 79dc0f2..a7f4a03 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -4014,6 +4014,11 @@ status_t ACodec::getPortFormat(OMX_U32 portIndex, sp<AMessage> &notify) {
         return err;
     }
 
+#ifdef CAPRI_HWC
+    if (strncmp(mComponentName.c_str(), "OMX.BRCM.vc4.encoder.", 21) != 0)
+        // Skip checking on vc4 encoder. It will return the incorrect
+        // port index, but correct parameters.
+#endif
     if (def.eDir != (portIndex == kPortIndexOutput ? OMX_DirOutput : OMX_DirInput)) {
         ALOGE("unexpected dir: %s(%d) on %s port", asString(def.eDir), def.eDir, niceIndex);
         return BAD_VALUE;
-- 
2.6.3


From f7fe78a3422ac2949d9e9d97345f93d813aa39af Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Sun, 23 Nov 2014 17:27:20 +0700
Subject: [PATCH 4/7] ACodec: Don't trust provided width/height when setting
 input buffer size

They are bogus

Change-Id: I202b291a84d2f9a8c29aa2177ba52a0465f39deb
---
 media/libstagefright/ACodec.cpp | 10 +++-------
 1 file changed, 3 insertions(+), 7 deletions(-)

diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index a7f4a03..043fc16 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -2169,13 +2169,9 @@ status_t ACodec::configureCodec(
 // Capri's OMX fail to set a reasonable default size from width and height
 #ifdef CAPRI_HWC
     else if (!strncmp(mComponentName.c_str(), "OMX.BRCM.vc4.decoder.", 21)) {
-        int32_t width;
-        int32_t height;
-        if (msg->findInt32("width", &width) && msg->findInt32("height", &height)) {
-            setMinBufferSize(kPortIndexInput, (width * height * 3) / 2);
-        } else {
-            ALOGE("Failed to set min buffer size");
-        }
+        // We cannot trust the width/height from the message
+        // so just use 1920x1080
+        setMinBufferSize(kPortIndexInput, (1920 * 1080 * 3) / 2);
     }
 #endif
 
-- 
2.6.3


From 12016439657f89636334042176cde74fa0a2ffc6 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Tue, 16 Dec 2014 21:12:22 +0700
Subject: [PATCH 5/7] stagefright: i9082: don't allocate too many extra buffers

Too many extra buffers (for a total of 8) causes random
video freezes and freezes on rotation

Change-Id: Idfe85f3cd77d6aa5422073857ceecec902e3ca68
---
 media/libstagefright/ACodec.cpp   | 4 ++++
 media/libstagefright/OMXCodec.cpp | 4 ++++
 2 files changed, 8 insertions(+)

diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index 043fc16..649cad0 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -974,7 +974,11 @@ status_t ACodec::configureOutputBuffersFromNativeWindow(
     // 2. try to allocate two (2) additional buffers to reduce starvation from
     //    the consumer
     //    plus an extra buffer to account for incorrect minUndequeuedBufs
+#ifdef CAPRI_HWC
+    for (OMX_U32 extraBuffers = 1; /* condition inside loop */; extraBuffers--) {
+#else
     for (OMX_U32 extraBuffers = 2 + 1; /* condition inside loop */; extraBuffers--) {
+#endif
         OMX_U32 newBufferCount =
             def.nBufferCountMin + *minUndequeuedBuffers + extraBuffers;
         def.nBufferCountActual = newBufferCount;
diff --git a/media/libstagefright/OMXCodec.cpp b/media/libstagefright/OMXCodec.cpp
index fa2999a..9ee48b2 100644
--- a/media/libstagefright/OMXCodec.cpp
+++ b/media/libstagefright/OMXCodec.cpp
@@ -1872,7 +1872,11 @@ status_t OMXCodec::allocateOutputBuffersFromNativeWindow() {
     CODEC_LOGI("OMX-buffers: min=%u actual=%u undeq=%d+1",
             def.nBufferCountMin, def.nBufferCountActual, minUndequeuedBufs);
 
+#ifdef CAPRI_HWC
+    for (OMX_U32 extraBuffers = 1; /* condition inside loop */; extraBuffers--) {
+#else
     for (OMX_U32 extraBuffers = 2 + 1; /* condition inside loop */; extraBuffers--) {
+#endif
         OMX_U32 newBufferCount =
             def.nBufferCountMin + minUndequeuedBufs + extraBuffers;
         def.nBufferCountActual = newBufferCount;
-- 
2.6.3


From be3c79236b9e01252236e7fdec1b1b8ff0ac9177 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Sat, 20 Dec 2014 19:09:59 +0700
Subject: [PATCH 6/7] stagefright: CAPRI_HWC: fix for screen recording

Change-Id: Ib8a677eb1ecabc30efe163faa9b209f4db966437
---
 media/libstagefright/omx/GraphicBufferSource.cpp | 2 ++
 media/libstagefright/omx/OMXNodeInstance.cpp     | 7 +++++++
 2 files changed, 9 insertions(+)

diff --git a/media/libstagefright/omx/GraphicBufferSource.cpp b/media/libstagefright/omx/GraphicBufferSource.cpp
index 1a7dc9d..1c468d4 100644
--- a/media/libstagefright/omx/GraphicBufferSource.cpp
+++ b/media/libstagefright/omx/GraphicBufferSource.cpp
@@ -369,6 +369,7 @@ void GraphicBufferSource::codecBufferEmptied(OMX_BUFFERHEADERTYPE* header, int f
             }
         } else if (type == kMetadataBufferTypeANWBuffer
                 && header->nAllocLen >= sizeof(VideoNativeMetadata)) {
+#ifndef CAPRI_HWC
             VideoNativeMetadata &nativeMeta = *(VideoNativeMetadata *)data;
             if (nativeMeta.pBuffer != codecBuffer.mGraphicBuffer->getNativeBuffer()) {
                 // should never happen
@@ -376,6 +377,7 @@ void GraphicBufferSource::codecBufferEmptied(OMX_BUFFERHEADERTYPE* header, int f
                         nativeMeta.pBuffer, codecBuffer.mGraphicBuffer->getNativeBuffer());
                 CHECK(!"codecBufferEmptied: mismatched buffer");
             }
+#endif
         }
     }
 
diff --git a/media/libstagefright/omx/OMXNodeInstance.cpp b/media/libstagefright/omx/OMXNodeInstance.cpp
index 94a213a..b42f067 100644
--- a/media/libstagefright/omx/OMXNodeInstance.cpp
+++ b/media/libstagefright/omx/OMXNodeInstance.cpp
@@ -881,10 +881,17 @@ status_t OMXNodeInstance::createGraphicBufferSource(
     }
 
     if (def.format.video.eColorFormat != OMX_COLOR_FormatAndroidOpaque) {
+#ifdef CAPRI_HWC
+        // VC Encoder change OMX_COLOR_FormatAndroidOpaque to 0x7F000005
+        if (def.format.video.eColorFormat != 0x7F000005) {
+#endif
         CLOGW("createInputSurface requires COLOR_FormatSurface "
                 "(AndroidOpaque) color format instead of %s(%#x)",
                 asString(def.format.video.eColorFormat), def.format.video.eColorFormat);
         return INVALID_OPERATION;
+#ifdef CAPRI_HWC
+        }
+#endif
     }
 
     uint32_t usageBits;
-- 
2.6.3


From b80f38d5873bf02c375ff6ce496f18eddd967b74 Mon Sep 17 00:00:00 2001
From: Pawit Pornkitprasan <p.pawit@gmail.com>
Date: Sun, 21 Dec 2014 15:25:33 +0700
Subject: [PATCH 7/7] stagefright: CAPRI_HWC: fix for miracast

Our encoder does not support OMX_Video_ControlRateConstant

Change-Id: I5f98f00406a6b28c1a2a1862fbcefa2fdd9055d6
---
 media/libstagefright/ACodec.cpp | 18 ++++++++++++------
 1 file changed, 12 insertions(+), 6 deletions(-)

diff --git a/media/libstagefright/ACodec.cpp b/media/libstagefright/ACodec.cpp
index 649cad0..5e1323b 100644
--- a/media/libstagefright/ACodec.cpp
+++ b/media/libstagefright/ACodec.cpp
@@ -3166,7 +3166,13 @@ static OMX_U32 setPFramesSpacing(int32_t iFramesInterval, int32_t frameRate) {
     return ret;
 }
 
-static OMX_VIDEO_CONTROLRATETYPE getBitrateMode(const sp<AMessage> &msg) {
+static OMX_VIDEO_CONTROLRATETYPE getBitrateMode(const sp<AMessage> &msg, const AString &name) {
+#ifdef CAPRI_HWC
+    // vc4 encoder only supports VBR
+    if (strncmp(name.c_str(), "OMX.BRCM.vc4.encoder.", 21) == 0) {
+        return OMX_Video_ControlRateVariable;
+    }
+#endif
     int32_t tmp;
     if (!msg->findInt32("bitrate-mode", &tmp)) {
         return OMX_Video_ControlRateVariable;
@@ -3182,7 +3188,7 @@ status_t ACodec::setupMPEG4EncoderParameters(const sp<AMessage> &msg) {
         return INVALID_OPERATION;
     }
 
-    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg);
+    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg, mComponentName);
 
     float frameRate;
     if (!msg->findFloat("frame-rate", &frameRate)) {
@@ -3263,7 +3269,7 @@ status_t ACodec::setupH263EncoderParameters(const sp<AMessage> &msg) {
         return INVALID_OPERATION;
     }
 
-    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg);
+    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg, mComponentName);
 
     float frameRate;
     if (!msg->findFloat("frame-rate", &frameRate)) {
@@ -3391,7 +3397,7 @@ status_t ACodec::setupAVCEncoderParameters(const sp<AMessage> &msg) {
         return INVALID_OPERATION;
     }
 
-    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg);
+    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg, mComponentName);
 
     float frameRate;
     if (!msg->findFloat("frame-rate", &frameRate)) {
@@ -3499,7 +3505,7 @@ status_t ACodec::setupHEVCEncoderParameters(const sp<AMessage> &msg) {
         return INVALID_OPERATION;
     }
 
-    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg);
+    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg, mComponentName);
 
     float frameRate;
     if (!msg->findFloat("frame-rate", &frameRate)) {
@@ -3566,7 +3572,7 @@ status_t ACodec::setupVPXEncoderParameters(const sp<AMessage> &msg) {
     }
     msg->findInt32("i-frame-interval", &iFrameInterval);
 
-    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg);
+    OMX_VIDEO_CONTROLRATETYPE bitrateMode = getBitrateMode(msg, mComponentName);
 
     float frameRate;
     if (!msg->findFloat("frame-rate", &frameRate)) {
-- 
2.6.3

