From c5df53abc490359d0630faff9e4a35c00d01b408 Mon Sep 17 00:00:00 2001
From: ghsr <ghsr92@yandex.ru>
Date: Sun, 30 Nov 2014 14:14:26 +0500
Subject: [PATCH] Add Button Backlight control

Change-Id: I7f31b9829baf6fe18a7a664ad480ed3b4d295441
---
 res/layout/button_backlight.xml                    | 164 ++++++++
 res/values/cm_strings.xml                          |  19 +
 res/xml/button_settings.xml                        |   6 +
 .../android/settings/BacklightTimeoutSeekBar.java  |  92 +++++
 .../settings/ButtonBacklightBrightness.java        | 441 +++++++++++++++++++++
 src/com/android/settings/ButtonSettings.java       |  16 +
 6 files changed, 738 insertions(+)
 create mode 100644 res/layout/button_backlight.xml
 create mode 100644 src/com/android/settings/BacklightTimeoutSeekBar.java
 create mode 100644 src/com/android/settings/ButtonBacklightBrightness.java

diff --git a/res/layout/button_backlight.xml b/res/layout/button_backlight.xml
new file mode 100644
index 0000000..e0a682b
--- /dev/null
+++ b/res/layout/button_backlight.xml
@@ -0,0 +1,164 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+     Copyright (C) 2013 The CyanogenMod Project
+
+     Licensed under the Apache License, Version 2.0 (the "License");
+     you may not use this file except in compliance with the License.
+     You may obtain a copy of the License at
+
+         http://www.apache.org/licenses/LICENSE-2.0
+
+     Unless required by applicable law or agreed to in writing, software
+     distributed under the License is distributed on an "AS IS" BASIS,
+     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+     See the License for the specific language governing permissions and
+     limitations under the License.
+-->
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:orientation="vertical">
+
+    <LinearLayout
+        android:id="@+id/button_container"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content">
+
+        <LinearLayout
+            android:id="@+id/checkbox_container"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:padding="10dp">
+
+            <CheckBox
+                android:id="@+id/backlight_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="@string/button_backlight_enabled" />
+
+        </LinearLayout>
+
+        <RelativeLayout
+            android:id="@+id/seekbar_container"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:paddingTop="10dp"
+            android:paddingBottom="10dp">
+
+            <TextView
+                android:id="@+id/text"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:paddingStart="10dip"
+                android:paddingEnd="10dip"
+                android:text="@string/button_backlight_seekbar_title" />
+            <TextView android:id="@+id/value"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentEnd="true"
+                android:paddingStart="10dip"
+                android:paddingEnd="10dip" />
+            <SeekBar android:id="@+id/seekbar"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_below="@id/text"
+                android:paddingTop="2dip"
+                android:paddingStart="20dip"
+                android:paddingEnd="20dip" />
+
+        </RelativeLayout>
+
+    </LinearLayout>
+
+    <RelativeLayout
+        android:id="@+id/timeout_container"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        android:gravity="center_horizontal"
+        android:paddingBottom="10dp">
+
+        <TextView android:id="@+id/timeout_text"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:text="@string/backlight_timeout_title"
+            android:paddingStart="10dip"
+            android:paddingEnd="10dip" />
+        <TextView android:id="@+id/timeout_value"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:layout_alignParentEnd="true"
+            android:paddingStart="10dip"
+            android:paddingEnd="10dip" />
+        <com.android.settings.BacklightTimeoutSeekBar
+            android:id="@+id/timeout_seekbar"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:layout_below="@id/timeout_text"
+            android:paddingTop="2dip"
+            android:paddingStart="20dip"
+            android:paddingEnd="20dip" />
+
+    </RelativeLayout>
+
+    <View
+        android:id="@+id/button_keyboard_divider"
+        android:layout_width="match_parent"
+        android:layout_height="2dip"
+        android:layout_marginStart="10dip"
+        android:layout_marginEnd="10dip"
+        android:layout_marginTop="5dip"
+        android:layout_marginBottom="5dip"
+        android:background="@android:drawable/divider_horizontal_dark" />
+
+    <LinearLayout
+        android:id="@+id/keyboard_container"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content">
+
+        <LinearLayout
+            android:id="@+id/checkbox_container"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:padding="10dp">
+
+            <CheckBox
+                android:id="@+id/backlight_switch"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:text="@string/keyboard_backlight_enabled" />
+
+        </LinearLayout>
+
+        <RelativeLayout
+            android:id="@+id/seekbar_container"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:paddingTop="10dp"
+            android:paddingBottom="10dp">
+
+            <TextView
+                android:id="@+id/text"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:paddingStart="10dip"
+                android:paddingEnd="10dip"
+                android:text="@string/keyboard_backlight_seekbar_title" />
+            <TextView android:id="@+id/value"
+                android:layout_width="wrap_content"
+                android:layout_height="wrap_content"
+                android:layout_alignParentEnd="true"
+                android:paddingStart="10dip"
+                android:paddingEnd="10dip" />
+            <SeekBar android:id="@+id/seekbar"
+                android:layout_width="match_parent"
+                android:layout_height="wrap_content"
+                android:layout_below="@id/text"
+                android:paddingTop="2dip"
+                android:paddingStart="20dip"
+                android:paddingEnd="20dip" />
+
+        </RelativeLayout>
+
+    </LinearLayout>
+
+</LinearLayout>
diff --git a/res/values/cm_strings.xml b/res/values/cm_strings.xml
index 812d4de..6a4a00c 100644
--- a/res/values/cm_strings.xml
+++ b/res/values/cm_strings.xml
@@ -429,6 +429,25 @@
     <string name="ime_switcher_notify">Selector notification</string>
     <string name="ime_switcher_notify_summary">Display input method selector notification</string>
 
+    <!-- Automatic brightness customization -->
+    <string name="auto_brightness_reset_button">Reset</string>
+
+    <!-- Hardware tunables - Key backlight -->
+    <string name="button_backlight_title">Backlight</string>
+    <string name="button_backlight_enabled">Illuminate buttons</string>
+    <string name="keyboard_backlight_enabled">Illuminate keyboard</string>
+    <string name="button_backlight_seekbar_title">Button brightness</string>
+    <string name="keyboard_backlight_seekbar_title">Keyboard brightness</string>
+    <string name="backlight_timeout_title">Illumination timeout</string>
+    <string name="backlight_timeout_unlimited">Don\'t turn off</string>
+    <plurals name="backlight_timeout_time">
+        <item quantity="one"><xliff:g id="seconds">%d</xliff:g> second</item>
+        <item quantity="other"><xliff:g id="seconds">%d</xliff:g> seconds</item>
+    </plurals>
+    <string name="backlight_summary_disabled">Disabled</string>
+    <string name="backlight_summary_enabled_with_timeout">Enabled for <xliff:g id="timeout">%s</xliff:g></string>
+    <string name="backlight_summary_enabled">Enabled</string>
+
     <!-- App ops -->
     <string name="app_ops_summaries_coarse_location">coarse location</string>
     <string name="app_ops_summaries_fine_location">fine location</string>
diff --git a/res/xml/button_settings.xml b/res/xml/button_settings.xml
index 35ce751..6231182 100644
--- a/res/xml/button_settings.xml
+++ b/res/xml/button_settings.xml
@@ -17,6 +17,12 @@
 <PreferenceScreen xmlns:android="http://schemas.android.com/apk/res/android"
         xmlns:settings="http://schemas.android.com/apk/res/com.android.settings">
 
+    <com.android.settings.ButtonBacklightBrightness
+        android:key="button_backlight"
+        android:title="@string/button_backlight_title"
+        android:dialogTitle="@string/button_backlight_title"
+        android:persistent="false" />
+
     <SwitchPreference
         android:key="disable_nav_keys"
         android:title="@string/disable_navkeys_title"
diff --git a/src/com/android/settings/BacklightTimeoutSeekBar.java b/src/com/android/settings/BacklightTimeoutSeekBar.java
new file mode 100644
index 0000000..4ab96a9
--- /dev/null
+++ b/src/com/android/settings/BacklightTimeoutSeekBar.java
@@ -0,0 +1,92 @@
+/*
+ * Copyright (C) 2013 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings;
+
+import android.content.Context;
+import android.graphics.drawable.Drawable;
+import android.util.AttributeSet;
+import android.widget.SeekBar;
+
+public class BacklightTimeoutSeekBar extends SeekBar {
+    private int mMax;
+    private int mGap;
+    private boolean mUpdatingThumb;
+
+    public BacklightTimeoutSeekBar(Context context) {
+        super(context);
+    }
+
+    public BacklightTimeoutSeekBar(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    public BacklightTimeoutSeekBar(Context context, AttributeSet attrs, int defStyle) {
+        super(context, attrs, defStyle);
+    }
+
+    @Override
+    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
+        mUpdatingThumb = true;
+        super.onSizeChanged(w, h, oldw, oldh);
+        mUpdatingThumb = false;
+    }
+
+    @Override
+    public void setThumb(Drawable thumb) {
+        mUpdatingThumb = true;
+        super.setThumb(thumb);
+        mUpdatingThumb = false;
+    }
+
+    @Override
+    public void setMax(int max) {
+        mMax = max;
+        mGap = max / 10;
+        super.setMax(max + 2 * mGap - 1);
+    }
+
+    @Override
+    public void setProgress(int progress) {
+        if (progress == 0) {
+            progress = getMax();
+        } else {
+            progress--;
+        }
+        super.setProgress(progress);
+    }
+
+    @Override
+    public int getProgress() {
+        int progress = super.getProgress();
+        if (mUpdatingThumb) {
+            return progress;
+        } else if (progress == getMax()) {
+            return 0;
+        }
+        return progress + 1;
+    }
+
+    protected int updateTouchProgress(int lastProgress, int newProgress) {
+        if (newProgress < mMax) {
+            return newProgress;
+        }
+        if (newProgress < mMax + mGap) {
+            return mMax - 1;
+        }
+        return getMax();
+    }
+}
diff --git a/src/com/android/settings/ButtonBacklightBrightness.java b/src/com/android/settings/ButtonBacklightBrightness.java
new file mode 100644
index 0000000..e777e52
--- /dev/null
+++ b/src/com/android/settings/ButtonBacklightBrightness.java
@@ -0,0 +1,441 @@
+/*
+ * Copyright (C) 2013 The CyanogenMod Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.android.settings;
+
+import android.app.AlertDialog;
+import android.content.ContentResolver;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.res.Resources;
+import android.os.Bundle;
+import android.os.Parcel;
+import android.os.Parcelable;
+import android.preference.DialogPreference;
+import android.provider.Settings;
+import android.util.AttributeSet;
+import android.view.View;
+import android.view.ViewGroup;
+import android.view.Window;
+import android.view.WindowManager.LayoutParams;
+import android.widget.Button;
+import android.widget.CheckBox;
+import android.widget.CompoundButton;
+import android.widget.SeekBar;
+import android.widget.TextView;
+
+import com.android.settings.R;
+
+public class ButtonBacklightBrightness extends DialogPreference implements
+        SeekBar.OnSeekBarChangeListener {
+    private static final int DEFAULT_BUTTON_TIMEOUT = 5;
+
+    private Window mWindow;
+
+    private BrightnessControl mButtonBrightness;
+    private BrightnessControl mKeyboardBrightness;
+    private BrightnessControl mActiveControl;
+
+    private ViewGroup mTimeoutContainer;
+    private SeekBar mTimeoutBar;
+    private TextView mTimeoutValue;
+
+    private ContentResolver mResolver;
+
+    public ButtonBacklightBrightness(Context context, AttributeSet attrs) {
+        super(context, attrs);
+
+        mResolver = context.getContentResolver();
+
+        setDialogLayoutResource(R.layout.button_backlight);
+
+        if (isKeyboardSupported()) {
+            mKeyboardBrightness = new BrightnessControl(
+                    Settings.System.KEYBOARD_BRIGHTNESS, false);
+            mActiveControl = mKeyboardBrightness;
+        }
+        if (isButtonSupported()) {
+            boolean isSingleValue = !context.getResources().getBoolean(
+                    com.android.internal.R.bool.config_deviceHasVariableButtonBrightness);
+
+            int defaultBrightness = context.getResources().getInteger(
+                    com.android.internal.R.integer.config_buttonBrightnessSettingDefault);
+
+            mButtonBrightness = new BrightnessControl(
+                    Settings.System.BUTTON_BRIGHTNESS, isSingleValue, defaultBrightness);
+            mActiveControl = mButtonBrightness;
+        }
+
+        updateSummary();
+    }
+
+    @Override
+    protected void onPrepareDialogBuilder(AlertDialog.Builder builder) {
+        builder.setNeutralButton(R.string.auto_brightness_reset_button,
+                new DialogInterface.OnClickListener() {
+            @Override
+            public void onClick(DialogInterface dialog, int which) {
+            }
+        });
+    }
+
+    @Override
+    protected void onBindDialogView(View view) {
+        super.onBindDialogView(view);
+
+        mTimeoutContainer = (ViewGroup) view.findViewById(R.id.timeout_container);
+        mTimeoutBar = (SeekBar) view.findViewById(R.id.timeout_seekbar);
+        mTimeoutValue = (TextView) view.findViewById(R.id.timeout_value);
+        mTimeoutBar.setMax(30);
+        mTimeoutBar.setOnSeekBarChangeListener(this);
+        mTimeoutBar.setProgress(getTimeout());
+        handleTimeoutUpdate(mTimeoutBar.getProgress());
+
+        ViewGroup buttonContainer = (ViewGroup) view.findViewById(R.id.button_container);
+        if (mButtonBrightness != null) {
+            mButtonBrightness.init(buttonContainer);
+        } else {
+            buttonContainer.setVisibility(View.GONE);
+            mTimeoutContainer.setVisibility(View.GONE);
+        }
+
+        ViewGroup keyboardContainer = (ViewGroup) view.findViewById(R.id.keyboard_container);
+        if (mKeyboardBrightness != null) {
+            mKeyboardBrightness.init(keyboardContainer);
+        } else {
+            keyboardContainer.setVisibility(View.GONE);
+        }
+
+        if (mButtonBrightness == null || mKeyboardBrightness == null) {
+            view.findViewById(R.id.button_keyboard_divider).setVisibility(View.GONE);
+        }
+    }
+
+    @Override
+    protected void showDialog(Bundle state) {
+        super.showDialog(state);
+
+        // Can't use onPrepareDialogBuilder for this as we want the dialog
+        // to be kept open on click
+        AlertDialog d = (AlertDialog) getDialog();
+        Button defaultsButton = d.getButton(DialogInterface.BUTTON_NEUTRAL);
+        defaultsButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                mTimeoutBar.setProgress(DEFAULT_BUTTON_TIMEOUT);
+                if (mButtonBrightness != null) {
+                    mButtonBrightness.reset();
+                }
+                if (mKeyboardBrightness != null) {
+                    mKeyboardBrightness.reset();
+                }
+            }
+        });
+
+        if (getDialog() != null) {
+            mWindow = getDialog().getWindow();
+        }
+        updateBrightnessPreview();
+    }
+
+    @Override
+    protected void onDialogClosed(boolean positiveResult) {
+        super.onDialogClosed(positiveResult);
+
+        if (!positiveResult) {
+            return;
+        }
+
+        applyTimeout(mTimeoutBar.getProgress());
+        if (mButtonBrightness != null) {
+            mButtonBrightness.applyBrightness();
+        }
+        if (mKeyboardBrightness != null) {
+            mKeyboardBrightness.applyBrightness();
+        }
+
+        updateSummary();
+    }
+
+    @Override
+    protected Parcelable onSaveInstanceState() {
+        final Parcelable superState = super.onSaveInstanceState();
+        if (getDialog() == null || !getDialog().isShowing()) {
+            return superState;
+        }
+
+        // Save the dialog state
+        final SavedState myState = new SavedState(superState);
+        myState.timeout = mTimeoutBar.getProgress();
+        if (mButtonBrightness != null) {
+            myState.button = mButtonBrightness.getBrightness(false);
+        }
+        if (mKeyboardBrightness != null) {
+            myState.keyboard = mKeyboardBrightness.getBrightness(false);
+        }
+
+        return myState;
+    }
+
+    @Override
+    protected void onRestoreInstanceState(Parcelable state) {
+        if (state == null || !state.getClass().equals(SavedState.class)) {
+            // Didn't save state for us in onSaveInstanceState
+            super.onRestoreInstanceState(state);
+            return;
+        }
+
+        SavedState myState = (SavedState) state;
+        super.onRestoreInstanceState(myState.getSuperState());
+
+        mTimeoutBar.setProgress(myState.timeout);
+        if (mButtonBrightness != null) {
+            mButtonBrightness.setBrightness(myState.button);
+        }
+        if (mKeyboardBrightness != null) {
+            mKeyboardBrightness.setBrightness(myState.keyboard);
+        }
+    }
+
+    public boolean isButtonSupported() {
+        final Resources res = getContext().getResources();
+        boolean hasAnyKey = res.getInteger(
+                com.android.internal.R.integer.config_deviceHardwareKeys) != 0;
+        boolean hasBacklight = res.getInteger(
+                com.android.internal.R.integer.config_buttonBrightnessSettingDefault) > 0;
+
+        return hasAnyKey && hasBacklight;
+    }
+
+    public boolean isKeyboardSupported() {
+        return getContext().getResources().getInteger(
+                com.android.internal.R.integer.config_keyboardBrightnessSettingDefault) > 0;
+    }
+
+    public void updateSummary() {
+        if (mButtonBrightness != null) {
+            int buttonBrightness = mButtonBrightness.getBrightness(true);
+            int timeout = getTimeout();
+
+            if (buttonBrightness == 0) {
+                setSummary(R.string.backlight_summary_disabled);
+            } else if (timeout == 0) {
+                setSummary(R.string.backlight_summary_enabled);
+            } else {
+                setSummary(getContext().getString(R.string.backlight_summary_enabled_with_timeout,
+                        getTimeoutString(timeout)));
+            }
+        } else if (mKeyboardBrightness != null && mKeyboardBrightness.getBrightness(true) != 0) {
+            setSummary(R.string.backlight_summary_enabled);
+        } else {
+            setSummary(R.string.backlight_summary_disabled);
+        }
+    }
+
+    private String getTimeoutString(int timeout) {
+        return getContext().getResources().getQuantityString(
+                R.plurals.backlight_timeout_time, timeout, timeout);
+    }
+
+    private int getTimeout() {
+        return Settings.System.getInt(mResolver,
+                Settings.System.BUTTON_BACKLIGHT_TIMEOUT, DEFAULT_BUTTON_TIMEOUT * 1000) / 1000;
+    }
+
+    private void applyTimeout(int timeout) {
+        Settings.System.putInt(mResolver,
+                Settings.System.BUTTON_BACKLIGHT_TIMEOUT, timeout * 1000);
+    }
+
+    private void updateBrightnessPreview() {
+        if (mWindow != null) {
+            LayoutParams params = mWindow.getAttributes();
+            if (mActiveControl != null) {
+                params.buttonBrightness = (float) mActiveControl.getBrightness(false) / 255.0f;
+            } else {
+                params.buttonBrightness = -1;
+            }
+            mWindow.setAttributes(params);
+        }
+    }
+
+    private void updateTimeoutEnabledState() {
+        int buttonBrightness = mButtonBrightness != null
+                ? mButtonBrightness.getBrightness(false) : 0;
+        int count = mTimeoutContainer.getChildCount();
+        for (int i = 0; i < count; i++) {
+            mTimeoutContainer.getChildAt(i).setEnabled(buttonBrightness != 0);
+        }
+    }
+
+    private void handleTimeoutUpdate(int timeout) {
+        if (timeout == 0) {
+            mTimeoutValue.setText(R.string.backlight_timeout_unlimited);
+        } else {
+            mTimeoutValue.setText(getTimeoutString(timeout));
+        }
+    }
+
+    @Override
+    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
+        handleTimeoutUpdate(progress);
+    }
+
+    @Override
+    public void onStartTrackingTouch(SeekBar seekBar) {
+        // Do nothing here
+    }
+
+    @Override
+    public void onStopTrackingTouch(SeekBar seekBar) {
+        // Do nothing here
+    }
+
+    private static class SavedState extends BaseSavedState {
+        int timeout;
+        int button;
+        int keyboard;
+
+        public SavedState(Parcelable superState) {
+            super(superState);
+        }
+
+        public SavedState(Parcel source) {
+            super(source);
+            timeout = source.readInt();
+            button = source.readInt();
+            keyboard = source.readInt();
+        }
+
+        @Override
+        public void writeToParcel(Parcel dest, int flags) {
+            super.writeToParcel(dest, flags);
+            dest.writeInt(timeout);
+            dest.writeInt(button);
+            dest.writeInt(keyboard);
+        }
+
+        public static final Parcelable.Creator<SavedState> CREATOR =
+                new Parcelable.Creator<SavedState>() {
+
+            public SavedState createFromParcel(Parcel in) {
+                return new SavedState(in);
+            }
+
+            public SavedState[] newArray(int size) {
+                return new SavedState[size];
+            }
+        };
+    }
+
+    private class BrightnessControl implements
+            SeekBar.OnSeekBarChangeListener, CheckBox.OnCheckedChangeListener {
+        private String mSetting;
+        private boolean mIsSingleValue;
+        private int mDefaultBrightness;
+        private CheckBox mCheckBox;
+        private SeekBar mSeekBar;
+        private TextView mValue;
+
+        public BrightnessControl(String setting, boolean singleValue, int defaultBrightness) {
+            mSetting = setting;
+            mIsSingleValue = singleValue;
+            mDefaultBrightness = defaultBrightness;
+        }
+
+        public BrightnessControl(String setting, boolean singleValue) {
+            this(setting, singleValue, 255);
+        }
+
+        public void init(ViewGroup container) {
+            int brightness = getBrightness(true);
+
+            if (mIsSingleValue) {
+                container.findViewById(R.id.seekbar_container).setVisibility(View.GONE);
+                mCheckBox = (CheckBox) container.findViewById(R.id.backlight_switch);
+                mCheckBox.setChecked(brightness != 0);
+                mCheckBox.setOnCheckedChangeListener(this);
+            } else {
+                container.findViewById(R.id.checkbox_container).setVisibility(View.GONE);
+                mSeekBar = (SeekBar) container.findViewById(R.id.seekbar);
+                mValue = (TextView) container.findViewById(R.id.value);
+
+                mSeekBar.setMax(255);
+                mSeekBar.setProgress(brightness);
+                mSeekBar.setOnSeekBarChangeListener(this);
+            }
+
+            handleBrightnessUpdate(brightness);
+        }
+
+        public int getBrightness(boolean persisted) {
+            if (mCheckBox != null && !persisted) {
+                return mCheckBox.isChecked() ? mDefaultBrightness : 0;
+            } else if (mSeekBar != null && !persisted) {
+                return mSeekBar.getProgress();
+            }
+            return Settings.System.getInt(mResolver, mSetting, mDefaultBrightness);
+        }
+
+        public void applyBrightness() {
+            Settings.System.putInt(mResolver, mSetting, getBrightness(false));
+        }
+
+        /* Behaviors when it's a seekbar */
+        @Override
+        public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {
+            handleBrightnessUpdate(progress);
+        }
+
+        @Override
+        public void onStartTrackingTouch(SeekBar seekBar) {
+            mActiveControl = this;
+        }
+
+        @Override
+        public void onStopTrackingTouch(SeekBar seekBar) {
+            // Do nothing here
+        }
+
+        /* Behaviors when it's a plain checkbox */
+        @Override
+        public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
+            mActiveControl = this;
+            updateBrightnessPreview();
+            updateTimeoutEnabledState();
+        }
+
+        public void setBrightness(int value) {
+            if (mIsSingleValue) {
+                mCheckBox.setChecked(value != 0);
+            } else {
+                mSeekBar.setProgress(value);
+            }
+        }
+
+        public void reset() {
+            setBrightness(mDefaultBrightness);
+        }
+
+        private void handleBrightnessUpdate(int brightness) {
+            updateBrightnessPreview();
+            if (mValue != null) {
+                mValue.setText(String.format("%d%%", (int)((brightness * 100) / 255)));
+            }
+            updateTimeoutEnabledState();
+        }
+    }
+}
diff --git a/src/com/android/settings/ButtonSettings.java b/src/com/android/settings/ButtonSettings.java
index af967eb..7c48697 100644
--- a/src/com/android/settings/ButtonSettings.java
+++ b/src/com/android/settings/ButtonSettings.java
@@ -55,6 +55,7 @@ public class ButtonSettings extends SettingsPreferenceFragment implements
     private static final String KEY_VOLUME_KEY_CURSOR_CONTROL = "volume_key_cursor_control";
     private static final String KEY_VOLUME_WAKE_DEVICE = "volume_key_wake_device";
     private static final String DISABLE_NAV_KEYS = "disable_nav_keys";
+    private static final String KEY_BUTTON_BACKLIGHT = "button_backlight";
     private static final String KEY_POWER_END_CALL = "power_end_call";
     private static final String KEY_HOME_ANSWER_CALL = "home_answer_call";
 
@@ -237,6 +238,12 @@ public class ButtonSettings extends SettingsPreferenceFragment implements
         } else {
             prefScreen.removePreference(volumeCategory);
         }
+
+        final ButtonBacklightBrightness backlight =
+                (ButtonBacklightBrightness) findPreference(KEY_BUTTON_BACKLIGHT);
+        if (!backlight.isButtonSupported() && !backlight.isKeyboardSupported()) {
+            prefScreen.removePreference(backlight);
+        }
     }
 
     @Override
@@ -372,6 +379,15 @@ public class ButtonSettings extends SettingsPreferenceFragment implements
                 (PreferenceCategory) prefScreen.findPreference(CATEGORY_ASSIST);
         final PreferenceCategory appSwitchCategory =
                 (PreferenceCategory) prefScreen.findPreference(CATEGORY_APPSWITCH);
+        final ButtonBacklightBrightness backlight =
+                (ButtonBacklightBrightness) prefScreen.findPreference(KEY_BUTTON_BACKLIGHT);
+
+        /* Toggle backlight control depending on navbar state, force it to
+           off if enabling */
+        if (backlight != null) {
+            backlight.setEnabled(!enabled);
+            backlight.updateSummary();
+        }
 
         /* Toggle hardkey control availability depending on navbar state */
         if (homeCategory != null) {
-- 
1.9.1

